# Escoamento bifásico unidimensional transiente
# Água escoa em um plano inclinado que arrasta o ar
# Deseja-se os campos de velocidades para os dois fluidos

# Bibliotecas
import numpy as np
from matplotlib import pyplot as plt

# Dados do problema
rho_agua = 998.2071  # Kg/m^3
mu_agua = 1.003e-3  # Kg/m^3
rho_ar = 1.204  # Kg/m^3
mu_ar = 17.4e-6  # Kg/(m*s)
teta = np.deg2rad(10)  #rad
g = 9.81  # m/s^2
gx = g*np.sin(teta)  # m/s^2

#Função Indicadora Massa Específica
def rho(I):
    if I == 1.0:
        r = rho_agua
    elif I == 0.5:
        r = 0.5*(rho_agua + rho_ar)
    elif I == 0.0:
        r = rho_ar
    return r

#Função Indicadora Viscosidade
def mu(I):
    if I == 1.0:
        m = mu_agua
    elif I == 0.5:
        m = 0.5*(mu_agua + mu_ar)
    elif I == 0.0:
        m = mu_ar
    return m

# Discretização Espaço-Temporal
ny = 91  #número de nós
n_i = 10 #Nó da interface
y = 0.015  #comprimento de análise [m]
dy = y/(ny-1)  #delta y [m]
h = (n_i-1)*dy
dt = 0.001  #incremento de tempo [s]
C = dt/(dy**2)

#Vetor velocidade
u = np.zeros(ny)

#Cálculo das velocidades pelo método explícito
for t in np.arange(0, 10, dt):
    for i in range(ny):
        if i == 0:
            u[i] = 0.0
        elif i>0 and i< n_i-1:
            I = 1
            u[i] = u[i] * (1 - (C/rho(I))*(mu(I) + mu(I))) + u[i+1]*C/(rho(I))*mu(I) + u[i-1]*C/(rho(I))*mu(I) + dt*(rho(I)-rho_ar)*gx/rho(I)
        elif i == n_i-1:
            I = 0.5
            u[i] = u[i] * (1 - ((C/rho(I))*(mu(I) + mu(I)))) + u[i+1]*C/(rho(I))*mu(I) + u[i-1]*C/(rho(I))*mu(I) + dt*(rho(I)-rho_ar)*gx/rho(I)
        elif i> n_i-1 and i<ny-1:
            I = 0
            u[i] = u[i] * (1 - ((C/rho(I))*(mu(I) + mu(I)))) + u[i+1]*C/(rho(I))*mu(I) + u[i-1]*C/(rho(I))*mu(I) + dt*(rho(I)-rho_ar)*gx/rho(I)
        elif i == ny-1:
            u[i] = 0.0

#Solução contínua
y = np.linspace(0, 9*dy, 10) 
u_an = rho_agua*gx/mu_agua*y*(h-(y/2))

#Plots 
plt.figure(0)
plt.plot(u_an, y, color = 'k', label = 'Solução Analítica')

plt.plot(u[:10], y, color = 'b',  label = 'Solução Numérica')

x_agua = np.linspace(0, 1.90, 10)
h_agua = np.ones(10)
h_agua = h_agua * h
plt.plot(x_agua, h_agua, color = 'k', linestyle = '--', label = 'Altura da lâmina de água')

plt.xlabel('Velocidade [m/s]')
plt.ylabel('Altura [m]')
plt.title('Velocidade na região líquida')

plt.legend()
plt.grid(True)
plt.show()

#Erro Absoluto - Comparação entre as duas soluções
erro = np.zeros(n_i)
for i in range(n_i):
    erro[i] = u_an[i] - u[i]
    erro [i] = np.abs(erro[i])

#Plot do erro absoluto
h_lam = np.linspace(0, h, 10)

plt.figure(1)
plt.plot(h_lam, erro, marker = 'o')
plt.xlabel('Altura da lâmina de água')
plt.ylabel('Erro absoluto')
plt.title('Comparação entre a solução analítica e numérica')

plt.grid(True)
plt.show()
